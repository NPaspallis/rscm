#summary This is a quick guide on how to create a context-aware app for ANDROID using the RSCM middleware

= Introduction =

The RSCM is a middleware for creating context-aware apps for ANDROID, using dynamically discovered components (i.e. context plugins)

= Basics =

Just like when you use the core services for ANDROID for getting context data (say location), similarly in RSCM you need to follow these steps:
  # Get access to the context service
  # Tell the context service the data you are interested in
  # Implement the callback that will handle the notifications
  # Ensure that the app's Manifest file includes the required permissions

= Example =

These steps are better illustrated with an example. This example creates a trivial app that simply displays the received context changes on the screen. Here are the required steps:

== 1. Create a new project ==

Using the IDE of your choice, create a new ANDROID project. Make sure that the project includes the _RSCM library_ as an external library.

== 2. Create a context-aware Activity ==

Create a new [http://developer.android.com/guide/topics/fundamentals/activities.html Activity]. Edit your activity so that it _extends_ the [http://code.google.com/p/rscm/source/browse/trunk/rscm-library/src/org/aspectsense/rscm/context/client/ContextListenerActivity.java org.aspectsense.rscm.context.client.ContextListenerActivity.java] instead of the [http://developer.android.com/reference/android/app/Activity.html android.app.Activity] class. The extended class is _abstract_ and requires the definition of two methods:
  # {{{public String[] getRequestedScopes();}}}
  # {{{public void onContextValueChanged(ContextValue contextValue);}}}

The resulting code should look like this:
{{{
package org.aspectsense.rscm.quickstart;

import org.aspectsense.rscm.ContextValue;
import org.aspectsense.rscm.context.client.ContextListenerActivity;

public class MyContextAwareActivity extends ContextListenerActivity
{
    @Override public String[] getRequestedScopes()
    {
        return new String[0]; // todo
    }

    @Override public void onContextValueChanged(ContextValue contextValue)
    {
        // todo
    }
}
}}}

== 3. Realize the {{{getRequestedScopes}}} method ===