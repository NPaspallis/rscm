#summary This is a quick guide on how to create a context sensor plugin for ANDROID using the RSCM middleware

= Introduction =

Context sensor (and reasoner) plugins are essential components of the RSCM middleware. Instead of packing all context sensing (and reasoning functionality) in a single app, RSCM allows you to define plugins as individual, reusable and dynamically discoverable components.

This page will guide you through the required steps for building a context sensor plugin.

= Basics =

A context plugin is basically an ANDROID Bound service. The required steps are:
  # Define the provided context types
  # Intercept the [http://developer.android.com/guide/topics/fundamentals/bound-services.html bound service lifecycle] methods to register (and unregister) from the underlying context source
  # Create context change notifications

= Example =

These steps are better illustrated with an example. This example creates a trivial sensor plugin that produces events related to the (remaining) battery level. Here are the required steps:

== 1. Create a new project ==

Using the IDE of your choice, create a new ANDROID project. Make sure that the project includes the RSCM library as an external library.


== 2. Create a new sensor service ==

Create a new [http://developer.android.com/guide/topics/fundamentals/services.html Service]. Edit your service so that it _extends_ the [http://code.google.com/p/rscm/source/browse/trunk/rscm-library/src/org/aspectsense/rscm/context/plugin/SensorService.java org.aspectsense.rscm.context.plugin.SensorService.java] instead of the android.app.Service class. The resulting code should look as follows:

{{{
public class BatterySensor extends SensorService
{
}
}}}

The _base class_ provides a protected method, that the implemented plugin must invoke in order to communicate the generated context values. The signature of this method is {{{ protected void notifyListener(final ContextValue contextValue); }}}

== 3. Bind to the underlying context source ==

Typically, context sensor plugins are _wrappers_ of underlying sensing functionality. For instance, the battery sensor plugin depends on ANDROID's own [http://developer.android.com/reference/android/os/BatteryManager.html BatteryManager].

A properly behaving plugin should start monitoring the underlying context as soon as it is started (i.e. service is bound) and stop immediately before terminating (i.e. service is stopped). To realize this kind of behavior, the Service lifecycle is typically exploited. In particular, the following two methods are overriden with the purpose of controlling when to start/stop listening to context changes:
  * {{{@Override public IBinder onBind(Intent intent);}}}
  * {{{@Override public boolean onUnbind(Intent intent);}}}
